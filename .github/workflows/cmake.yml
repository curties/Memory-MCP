# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Test
      working-directory: build
      run: |
        if [ -f "CTestTestfile.cmake" ]; then
          ctest -C ${{ env.BUILD_TYPE }} --output-on-failure
        else
          echo "No tests configured"
        fi

    - name: Verify Binary
      run: |
        if [ -f "build/bin/memory-mcp-server" ]; then
          echo "✅ Binary built successfully"
          file build/bin/memory-mcp-server
        else
          echo "❌ Binary not found"
          exit 1
        fi

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: memory-mcp-server-ubuntu
        path: build/bin/
        retention-days: 7

